/*
 * Scryfall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;
using System.ComponentModel;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Card
    /// </summary>
    [DataContract(Name = "card")]
    public partial class Card : IValidatableObject, INotifyPropertyChanged
    {
        private ImageUri imageUris;
        private string name;

        /// <summary>
        /// Defines Layout
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayoutEnum
        {
            /// <summary>
            /// Enum Normal for value: normal
            /// </summary>
            [EnumMember(Value = "normal")]
            Normal = 1,

            /// <summary>
            /// Enum Split for value: split
            /// </summary>
            [EnumMember(Value = "split")]
            Split = 2,

            /// <summary>
            /// Enum Flip for value: flip
            /// </summary>
            [EnumMember(Value = "flip")]
            Flip = 3,

            /// <summary>
            /// Enum Transform for value: transform
            /// </summary>
            [EnumMember(Value = "transform")]
            Transform = 4,

            /// <summary>
            /// Enum Meld for value: meld
            /// </summary>
            [EnumMember(Value = "meld")]
            Meld = 5,

            /// <summary>
            /// Enum Leveler for value: leveler
            /// </summary>
            [EnumMember(Value = "leveler")]
            Leveler = 6,

            /// <summary>
            /// Enum Saga for value: saga
            /// </summary>
            [EnumMember(Value = "saga")]
            Saga = 7,

            /// <summary>
            /// Enum Planar for value: planar
            /// </summary>
            [EnumMember(Value = "planar")]
            Planar = 8,

            /// <summary>
            /// Enum Scheme for value: scheme
            /// </summary>
            [EnumMember(Value = "scheme")]
            Scheme = 9,

            /// <summary>
            /// Enum Vanguard for value: vanguard
            /// </summary>
            [EnumMember(Value = "vanguard")]
            Vanguard = 10,

            /// <summary>
            /// Enum Token for value: token
            /// </summary>
            [EnumMember(Value = "token")]
            Token = 11,

            /// <summary>
            /// Enum DoubleFacedToken for value: double_faced_token
            /// </summary>
            [EnumMember(Value = "double_faced_token")]
            DoubleFacedToken = 12,

            /// <summary>
            /// Enum Emblem for value: emblem
            /// </summary>
            [EnumMember(Value = "emblem")]
            Emblem = 13,

            /// <summary>
            /// Enum Augment for value: augment
            /// </summary>
            [EnumMember(Value = "augment")]
            Augment = 14,

            /// <summary>
            /// Enum Host for value: host
            /// </summary>
            [EnumMember(Value = "host")]
            Host = 15
        }


        /// <summary>
        /// Gets or Sets Layout
        /// </summary>
        [DataMember(Name = "layout", EmitDefaultValue = false)]
        public LayoutEnum? Layout { get; set; }
        /// <summary>
        /// Defines Rarity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RarityEnum
        {
            /// <summary>
            /// Enum Common for value: common
            /// </summary>
            [EnumMember(Value = "common")]
            Common = 1,

            /// <summary>
            /// Enum Uncommon for value: uncommon
            /// </summary>
            [EnumMember(Value = "uncommon")]
            Uncommon = 2,

            /// <summary>
            /// Enum Rare for value: rare
            /// </summary>
            [EnumMember(Value = "rare")]
            Rare = 3,

            /// <summary>
            /// Enum Mythic for value: mythic
            /// </summary>
            [EnumMember(Value = "mythic")]
            Mythic = 4
        }


        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [DataMember(Name = "rarity", EmitDefaultValue = false)]
        public RarityEnum? Rarity { get; set; }
        /// <summary>
        /// Defines BorderColor
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BorderColorEnum
        {
            /// <summary>
            /// Enum Black for value: black
            /// </summary>
            [EnumMember(Value = "black")]
            Black = 1,

            /// <summary>
            /// Enum Borderless for value: borderless
            /// </summary>
            [EnumMember(Value = "borderless")]
            Borderless = 2,

            /// <summary>
            /// Enum Gold for value: gold
            /// </summary>
            [EnumMember(Value = "gold")]
            Gold = 3,

            /// <summary>
            /// Enum Silver for value: silver
            /// </summary>
            [EnumMember(Value = "silver")]
            Silver = 4,

            /// <summary>
            /// Enum White for value: white
            /// </summary>
            [EnumMember(Value = "white")]
            White = 5
        }


        /// <summary>
        /// Gets or Sets BorderColor
        /// </summary>
        [DataMember(Name = "border_color", EmitDefaultValue = false)]
        public BorderColorEnum? BorderColor { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Card" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="oracleId">oracleId.</param>
        /// <param name="multiverseIds">multiverseIds.</param>
        /// <param name="mtgoId">mtgoId.</param>
        /// <param name="arenaId">arenaId.</param>
        /// <param name="mtgoFoilId">mtgoFoilId.</param>
        /// <param name="uri">uri.</param>
        /// <param name="scryfallUri">scryfallUri.</param>
        /// <param name="printsSearchUri">printsSearchUri.</param>
        /// <param name="rulingsUri">rulingsUri.</param>
        /// <param name="name">name.</param>
        /// <param name="layout">layout.</param>
        /// <param name="cmc">cmc.</param>
        /// <param name="typeLine">typeLine.</param>
        /// <param name="oracleText">oracleText.</param>
        /// <param name="manaCost">manaCost.</param>
        /// <param name="power">power.</param>
        /// <param name="toughness">toughness.</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="lifeModifier">lifeModifier.</param>
        /// <param name="handModifier">handModifier.</param>
        /// <param name="colors">colors.</param>
        /// <param name="colorIndicator">colorIndicator.</param>
        /// <param name="colorIdentity">colorIdentity.</param>
        /// <param name="allParts">allParts.</param>
        /// <param name="cardFaces">cardFaces.</param>
        /// <param name="legalities">legalities.</param>
        /// <param name="reserved">reserved.</param>
        /// <param name="edhrecRank">edhrecRank.</param>
        /// <param name="set">set.</param>
        /// <param name="setName">setName.</param>
        /// <param name="collectorNumber">collectorNumber.</param>
        /// <param name="setSearchUri">setSearchUri.</param>
        /// <param name="scryfallSetUri">scryfallSetUri.</param>
        /// <param name="imageUris">imageUris.</param>
        /// <param name="highresImage">highresImage.</param>
        /// <param name="reprint">reprint.</param>
        /// <param name="digital">digital.</param>
        /// <param name="rarity">rarity.</param>
        /// <param name="flavorText">flavorText.</param>
        /// <param name="artist">artist.</param>
        /// <param name="illustrationId">illustrationId.</param>
        /// <param name="frame">frame.</param>
        /// <param name="fullArt">fullArt.</param>
        /// <param name="watermark">watermark.</param>
        /// <param name="borderColor">borderColor.</param>
        /// <param name="storySpotlightNumber">storySpotlightNumber.</param>
        /// <param name="storySpotlightUri">storySpotlightUri.</param>
        /// <param name="timeshifted">timeshifted.</param>
        /// <param name="colorshifted">colorshifted.</param>
        /// <param name="futureshifted">futureshifted.</param>
        /// <param name="purchaseUris">purchaseUris.</param>
        /// <param name="relatedUris">relatedUris.</param>
        public Card(Guid id = default(Guid), Guid oracleId = default(Guid), List<int> multiverseIds = default(List<int>), int mtgoId = default(int), int arenaId = default(int), int mtgoFoilId = default(int), string uri = default(string), string scryfallUri = default(string), string printsSearchUri = default(string), string rulingsUri = default(string), string name = default(string), LayoutEnum? layout = default(LayoutEnum?), double cmc = default(double), string typeLine = default(string), string oracleText = default(string), string manaCost = default(string), string power = default(string), string toughness = default(string), string loyalty = default(string), string lifeModifier = default(string), string handModifier = default(string), List<Colors> colors = default(List<Colors>), List<Colors> colorIndicator = default(List<Colors>), List<Colors> colorIdentity = default(List<Colors>), List<RelatedCards> allParts = default(List<RelatedCards>), List<CardFace> cardFaces = default(List<CardFace>), Legality legalities = default(Legality), bool reserved = default(bool), int edhrecRank = default(int), string set = default(string), string setName = default(string), string collectorNumber = default(string), string setSearchUri = default(string), string scryfallSetUri = default(string), ImageUri imageUris = default(ImageUri), bool highresImage = default(bool), bool reprint = default(bool), bool digital = default(bool), RarityEnum? rarity = default(RarityEnum?), string flavorText = default(string), string artist = default(string), Guid illustrationId = default(Guid), string frame = default(string), bool fullArt = default(bool), string watermark = default(string), BorderColorEnum? borderColor = default(BorderColorEnum?), int storySpotlightNumber = default(int), string storySpotlightUri = default(string), bool timeshifted = default(bool), bool colorshifted = default(bool), bool futureshifted = default(bool), Dictionary<string, string> purchaseUris = default(Dictionary<string, string>), Dictionary<string, string> relatedUris = default(Dictionary<string, string>))
        {
            this.Id = id;
            this.OracleId = oracleId;
            this.MultiverseIds = multiverseIds;
            this.MtgoId = mtgoId;
            this.ArenaId = arenaId;
            this.MtgoFoilId = mtgoFoilId;
            this.Uri = uri;
            this.ScryfallUri = scryfallUri;
            this.PrintsSearchUri = printsSearchUri;
            this.RulingsUri = rulingsUri;
            this.Name = name;
            this.Layout = layout;
            this.Cmc = cmc;
            this.TypeLine = typeLine;
            this.OracleText = oracleText;
            this.ManaCost = manaCost;
            this.Power = power;
            this.Toughness = toughness;
            this.Loyalty = loyalty;
            this.LifeModifier = lifeModifier;
            this.HandModifier = handModifier;
            this.Colors = colors;
            this.ColorIndicator = colorIndicator;
            this.ColorIdentity = colorIdentity;
            this.AllParts = allParts;
            this.CardFaces = cardFaces;
            this.Legalities = legalities;
            this.Reserved = reserved;
            this.EdhrecRank = edhrecRank;
            this.Set = set;
            this.SetName = setName;
            this.CollectorNumber = collectorNumber;
            this.SetSearchUri = setSearchUri;
            this.ScryfallSetUri = scryfallSetUri;
            this.ImageUris = imageUris;
            this.HighresImage = highresImage;
            this.Reprint = reprint;
            this.Digital = digital;
            this.Rarity = rarity;
            this.FlavorText = flavorText;
            this.Artist = artist;
            this.IllustrationId = illustrationId;
            this.Frame = frame;
            this.FullArt = fullArt;
            this.Watermark = watermark;
            this.BorderColor = borderColor;
            this.StorySpotlightNumber = storySpotlightNumber;
            this.StorySpotlightUri = storySpotlightUri;
            this.Timeshifted = timeshifted;
            this.Colorshifted = colorshifted;
            this.Futureshifted = futureshifted;
            this.PurchaseUris = purchaseUris;
            this.RelatedUris = relatedUris;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets OracleId
        /// </summary>
        [DataMember(Name = "oracle_id", EmitDefaultValue = false)]
        public Guid OracleId { get; set; }

        /// <summary>
        /// Gets or Sets MultiverseIds
        /// </summary>
        [DataMember(Name = "multiverse_ids", EmitDefaultValue = false)]
        public List<int> MultiverseIds { get; set; }

        /// <summary>
        /// Gets or Sets MtgoId
        /// </summary>
        [DataMember(Name = "mtgo_id", EmitDefaultValue = false)]
        public int MtgoId { get; set; }

        /// <summary>
        /// Gets or Sets ArenaId
        /// </summary>
        [DataMember(Name = "arena_id", EmitDefaultValue = false)]
        public int ArenaId { get; set; }

        /// <summary>
        /// Gets or Sets MtgoFoilId
        /// </summary>
        [DataMember(Name = "mtgo_foil_id", EmitDefaultValue = false)]
        public int MtgoFoilId { get; set; }

        /// <summary>
        /// Gets or Sets Uri
        /// </summary>
        [DataMember(Name = "uri", EmitDefaultValue = false)]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or Sets ScryfallUri
        /// </summary>
        [DataMember(Name = "scryfall_uri", EmitDefaultValue = false)]
        public string ScryfallUri { get; set; }

        /// <summary>
        /// Gets or Sets PrintsSearchUri
        /// </summary>
        [DataMember(Name = "prints_search_uri", EmitDefaultValue = false)]
        public string PrintsSearchUri { get; set; }

        /// <summary>
        /// Gets or Sets RulingsUri
        /// </summary>
        [DataMember(Name = "rulings_uri", EmitDefaultValue = false)]
        public string RulingsUri { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name
        {
            get => name; 
            set
            {
                name = value;
                OnPropertyChanged(nameof(Name));
            }
        }

        /// <summary>
        /// Gets or Sets Cmc
        /// </summary>
        [DataMember(Name = "cmc", EmitDefaultValue = false)]
        public double Cmc { get; set; }

        /// <summary>
        /// Gets or Sets TypeLine
        /// </summary>
        [DataMember(Name = "type_line", EmitDefaultValue = false)]
        public string TypeLine { get; set; }

        /// <summary>
        /// Gets or Sets OracleText
        /// </summary>
        [DataMember(Name = "oracle_text", EmitDefaultValue = false)]
        public string OracleText { get; set; }

        /// <summary>
        /// Gets or Sets ManaCost
        /// </summary>
        [DataMember(Name = "mana_cost", EmitDefaultValue = false)]
        public string ManaCost { get; set; }

        /// <summary>
        /// Gets or Sets Power
        /// </summary>
        [DataMember(Name = "power", EmitDefaultValue = false)]
        public string Power { get; set; }

        /// <summary>
        /// Gets or Sets Toughness
        /// </summary>
        [DataMember(Name = "toughness", EmitDefaultValue = false)]
        public string Toughness { get; set; }

        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name = "loyalty", EmitDefaultValue = false)]
        public string Loyalty { get; set; }

        /// <summary>
        /// Gets or Sets LifeModifier
        /// </summary>
        [DataMember(Name = "life_modifier", EmitDefaultValue = false)]
        public string LifeModifier { get; set; }

        /// <summary>
        /// Gets or Sets HandModifier
        /// </summary>
        [DataMember(Name = "hand_modifier", EmitDefaultValue = false)]
        public string HandModifier { get; set; }

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public List<Colors> Colors { get; set; }

        /// <summary>
        /// Gets or Sets ColorIndicator
        /// </summary>
        [DataMember(Name = "color_indicator", EmitDefaultValue = false)]
        public List<Colors> ColorIndicator { get; set; }

        /// <summary>
        /// Gets or Sets ColorIdentity
        /// </summary>
        [DataMember(Name = "color_identity", EmitDefaultValue = false)]
        public List<Colors> ColorIdentity { get; set; }

        /// <summary>
        /// Gets or Sets AllParts
        /// </summary>
        [DataMember(Name = "all_parts", EmitDefaultValue = false)]
        public List<RelatedCards> AllParts { get; set; }

        /// <summary>
        /// Gets or Sets CardFaces
        /// </summary>
        [DataMember(Name = "card_faces", EmitDefaultValue = false)]
        public List<CardFace> CardFaces { get; set; }

        /// <summary>
        /// Gets or Sets Legalities
        /// </summary>
        [DataMember(Name = "legalities", EmitDefaultValue = false)]
        public Legality Legalities { get; set; }

        /// <summary>
        /// Gets or Sets Reserved
        /// </summary>
        [DataMember(Name = "reserved", EmitDefaultValue = true)]
        public bool Reserved { get; set; }

        /// <summary>
        /// Gets or Sets EdhrecRank
        /// </summary>
        [DataMember(Name = "edhrec_rank", EmitDefaultValue = false)]
        public int EdhrecRank { get; set; }

        /// <summary>
        /// Gets or Sets Set
        /// </summary>
        [DataMember(Name = "set", EmitDefaultValue = false)]
        public string Set { get; set; }

        /// <summary>
        /// Gets or Sets SetName
        /// </summary>
        [DataMember(Name = "set_name", EmitDefaultValue = false)]
        public string SetName { get; set; }

        /// <summary>
        /// Gets or Sets CollectorNumber
        /// </summary>
        [DataMember(Name = "collector_number", EmitDefaultValue = false)]
        public string CollectorNumber { get; set; }

        /// <summary>
        /// Gets or Sets SetSearchUri
        /// </summary>
        [DataMember(Name = "set_search_uri", EmitDefaultValue = false)]
        public string SetSearchUri { get; set; }

        /// <summary>
        /// Gets or Sets ScryfallSetUri
        /// </summary>
        [DataMember(Name = "scryfall_set_uri", EmitDefaultValue = false)]
        public string ScryfallSetUri { get; set; }

        /// <summary>
        /// Gets or Sets ImageUris
        /// </summary>
        [DataMember(Name = "image_uris", EmitDefaultValue = false)]
        public ImageUri ImageUris
        {
            get => imageUris; 
            set
            {
                imageUris = value;
                OnPropertyChanged(nameof(ImageUris));
            }
        }

        /// <summary>
        /// Gets or Sets HighresImage
        /// </summary>
        [DataMember(Name = "highres_image", EmitDefaultValue = true)]
        public bool HighresImage { get; set; }

        /// <summary>
        /// Gets or Sets Reprint
        /// </summary>
        [DataMember(Name = "reprint", EmitDefaultValue = true)]
        public bool Reprint { get; set; }

        /// <summary>
        /// Gets or Sets Digital
        /// </summary>
        [DataMember(Name = "digital", EmitDefaultValue = true)]
        public bool Digital { get; set; }

        /// <summary>
        /// Gets or Sets FlavorText
        /// </summary>
        [DataMember(Name = "flavor_text", EmitDefaultValue = false)]
        public string FlavorText { get; set; }

        /// <summary>
        /// Gets or Sets Artist
        /// </summary>
        [DataMember(Name = "artist", EmitDefaultValue = false)]
        public string Artist { get; set; }

        /// <summary>
        /// Gets or Sets IllustrationId
        /// </summary>
        [DataMember(Name = "illustration_id", EmitDefaultValue = false)]
        public Guid IllustrationId { get; set; }

        /// <summary>
        /// Gets or Sets Frame
        /// </summary>
        [DataMember(Name = "frame", EmitDefaultValue = false)]
        public string Frame { get; set; }

        /// <summary>
        /// Gets or Sets FullArt
        /// </summary>
        [DataMember(Name = "full_art", EmitDefaultValue = true)]
        public bool FullArt { get; set; }

        /// <summary>
        /// Gets or Sets Watermark
        /// </summary>
        [DataMember(Name = "watermark", EmitDefaultValue = false)]
        public string Watermark { get; set; }

        /// <summary>
        /// Gets or Sets StorySpotlightNumber
        /// </summary>
        [DataMember(Name = "story_spotlight_number", EmitDefaultValue = false)]
        public int StorySpotlightNumber { get; set; }

        /// <summary>
        /// Gets or Sets StorySpotlightUri
        /// </summary>
        [DataMember(Name = "story_spotlight_uri", EmitDefaultValue = false)]
        public string StorySpotlightUri { get; set; }

        /// <summary>
        /// Gets or Sets Timeshifted
        /// </summary>
        [DataMember(Name = "timeshifted", EmitDefaultValue = true)]
        public bool Timeshifted { get; set; }

        /// <summary>
        /// Gets or Sets Colorshifted
        /// </summary>
        [DataMember(Name = "colorshifted", EmitDefaultValue = true)]
        public bool Colorshifted { get; set; }

        /// <summary>
        /// Gets or Sets Futureshifted
        /// </summary>
        [DataMember(Name = "futureshifted", EmitDefaultValue = true)]
        public bool Futureshifted { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseUris
        /// </summary>
        [DataMember(Name = "purchase_uris", EmitDefaultValue = false)]
        public Dictionary<string, string> PurchaseUris { get; set; }

        /// <summary>
        /// Gets or Sets RelatedUris
        /// </summary>
        [DataMember(Name = "related_uris", EmitDefaultValue = false)]
        public Dictionary<string, string> RelatedUris { get; set; }

        public event PropertyChangedEventHandler? PropertyChanged;

        protected void OnPropertyChanged(PropertyChangedEventArgs e)
        {
            PropertyChanged?.Invoke(this, e);
        }

        protected void OnPropertyChanged(string propertyName)
        {
            OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return Name;
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
