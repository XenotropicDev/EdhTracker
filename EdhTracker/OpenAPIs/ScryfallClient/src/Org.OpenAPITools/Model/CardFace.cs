/*
 * Scryfall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CardFace
    /// </summary>
    [DataContract(Name = "card_face")]
    public partial class CardFace : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardFace" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="typeLine">typeLine.</param>
        /// <param name="oracleText">oracleText.</param>
        /// <param name="manaCost">manaCost.</param>
        /// <param name="colors">colors.</param>
        /// <param name="colorIndicator">colorIndicator.</param>
        /// <param name="power">power.</param>
        /// <param name="toughness">toughness.</param>
        /// <param name="loyalty">loyalty.</param>
        /// <param name="flavorText">flavorText.</param>
        /// <param name="illustrationId">illustrationId.</param>
        /// <param name="imageUris">imageUris.</param>
        public CardFace(string name = default(string), string typeLine = default(string), string oracleText = default(string), string manaCost = default(string), List<Colors> colors = default(List<Colors>), List<Colors> colorIndicator = default(List<Colors>), string power = default(string), string toughness = default(string), string loyalty = default(string), string flavorText = default(string), Guid illustrationId = default(Guid), ImageUri imageUris = default(ImageUri))
        {
            this.Name = name;
            this.TypeLine = typeLine;
            this.OracleText = oracleText;
            this.ManaCost = manaCost;
            this.Colors = colors;
            this.ColorIndicator = colorIndicator;
            this.Power = power;
            this.Toughness = toughness;
            this.Loyalty = loyalty;
            this.FlavorText = flavorText;
            this.IllustrationId = illustrationId;
            this.ImageUris = imageUris;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TypeLine
        /// </summary>
        [DataMember(Name = "type_line", EmitDefaultValue = false)]
        public string TypeLine { get; set; }

        /// <summary>
        /// Gets or Sets OracleText
        /// </summary>
        [DataMember(Name = "oracle_text", EmitDefaultValue = false)]
        public string OracleText { get; set; }

        /// <summary>
        /// Gets or Sets ManaCost
        /// </summary>
        [DataMember(Name = "mana_cost", EmitDefaultValue = false)]
        public string ManaCost { get; set; }

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public List<Colors> Colors { get; set; }

        /// <summary>
        /// Gets or Sets ColorIndicator
        /// </summary>
        [DataMember(Name = "color_indicator", EmitDefaultValue = false)]
        public List<Colors> ColorIndicator { get; set; }

        /// <summary>
        /// Gets or Sets Power
        /// </summary>
        [DataMember(Name = "power", EmitDefaultValue = false)]
        public string Power { get; set; }

        /// <summary>
        /// Gets or Sets Toughness
        /// </summary>
        [DataMember(Name = "toughness", EmitDefaultValue = false)]
        public string Toughness { get; set; }

        /// <summary>
        /// Gets or Sets Loyalty
        /// </summary>
        [DataMember(Name = "loyalty", EmitDefaultValue = false)]
        public string Loyalty { get; set; }

        /// <summary>
        /// Gets or Sets FlavorText
        /// </summary>
        [DataMember(Name = "flavor_text", EmitDefaultValue = false)]
        public string FlavorText { get; set; }

        /// <summary>
        /// Gets or Sets IllustrationId
        /// </summary>
        [DataMember(Name = "illustration_id", EmitDefaultValue = false)]
        public Guid IllustrationId { get; set; }

        /// <summary>
        /// Gets or Sets ImageUris
        /// </summary>
        [DataMember(Name = "image_uris", EmitDefaultValue = false)]
        public ImageUri ImageUris { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardFace {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TypeLine: ").Append(TypeLine).Append("\n");
            sb.Append("  OracleText: ").Append(OracleText).Append("\n");
            sb.Append("  ManaCost: ").Append(ManaCost).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  ColorIndicator: ").Append(ColorIndicator).Append("\n");
            sb.Append("  Power: ").Append(Power).Append("\n");
            sb.Append("  Toughness: ").Append(Toughness).Append("\n");
            sb.Append("  Loyalty: ").Append(Loyalty).Append("\n");
            sb.Append("  FlavorText: ").Append(FlavorText).Append("\n");
            sb.Append("  IllustrationId: ").Append(IllustrationId).Append("\n");
            sb.Append("  ImageUris: ").Append(ImageUris).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
