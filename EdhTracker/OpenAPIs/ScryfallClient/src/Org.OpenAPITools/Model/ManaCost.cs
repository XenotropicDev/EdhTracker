/*
 * Scryfall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ManaCost
    /// </summary>
    [DataContract(Name = "mana_cost")]
    public partial class ManaCost : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public Colors? Colors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManaCost" /> class.
        /// </summary>
        /// <param name="cost">cost.</param>
        /// <param name="cmc">cmc.</param>
        /// <param name="colors">colors.</param>
        /// <param name="colorless">colorless.</param>
        /// <param name="monocolored">monocolored.</param>
        /// <param name="multicolored">multicolored.</param>
        public ManaCost(string cost = default(string), double cmc = default(double), Colors? colors = default(Colors?), bool colorless = default(bool), bool monocolored = default(bool), bool multicolored = default(bool))
        {
            this.Cost = cost;
            this.Cmc = cmc;
            this.Colors = colors;
            this.Colorless = colorless;
            this.Monocolored = monocolored;
            this.Multicolored = multicolored;
        }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public string Cost { get; set; }

        /// <summary>
        /// Gets or Sets Cmc
        /// </summary>
        [DataMember(Name = "cmc", EmitDefaultValue = false)]
        public double Cmc { get; set; }

        /// <summary>
        /// Gets or Sets Colorless
        /// </summary>
        [DataMember(Name = "colorless", EmitDefaultValue = true)]
        public bool Colorless { get; set; }

        /// <summary>
        /// Gets or Sets Monocolored
        /// </summary>
        [DataMember(Name = "monocolored", EmitDefaultValue = true)]
        public bool Monocolored { get; set; }

        /// <summary>
        /// Gets or Sets Multicolored
        /// </summary>
        [DataMember(Name = "multicolored", EmitDefaultValue = true)]
        public bool Multicolored { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManaCost {\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  Cmc: ").Append(Cmc).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  Colorless: ").Append(Colorless).Append("\n");
            sb.Append("  Monocolored: ").Append(Monocolored).Append("\n");
            sb.Append("  Multicolored: ").Append(Multicolored).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
