/*
 * Scryfall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ImageUri
    /// </summary>
    [DataContract(Name = "image_uri")]
    public partial class ImageUri : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageUri" /> class.
        /// </summary>
        /// <param name="small">small.</param>
        /// <param name="normal">normal.</param>
        /// <param name="large">large.</param>
        /// <param name="png">png.</param>
        /// <param name="artCrop">artCrop.</param>
        /// <param name="borderCrop">borderCrop.</param>
        public ImageUri(string small = default(string), string normal = default(string), string large = default(string), string png = default(string), string artCrop = default(string), string borderCrop = default(string))
        {
            this.Small = small;
            this.Normal = normal;
            this.Large = large;
            this.Png = png;
            this.ArtCrop = artCrop;
            this.BorderCrop = borderCrop;
        }

        /// <summary>
        /// Gets or Sets Small
        /// </summary>
        [DataMember(Name = "small", EmitDefaultValue = false)]
        public string Small { get; set; }

        /// <summary>
        /// Gets or Sets Normal
        /// </summary>
        [DataMember(Name = "normal", EmitDefaultValue = false)]
        public string Normal { get; set; }

        /// <summary>
        /// Gets or Sets Large
        /// </summary>
        [DataMember(Name = "large", EmitDefaultValue = false)]
        public string Large { get; set; }

        /// <summary>
        /// Gets or Sets Png
        /// </summary>
        [DataMember(Name = "png", EmitDefaultValue = false)]
        public string Png { get; set; }

        /// <summary>
        /// Gets or Sets ArtCrop
        /// </summary>
        [DataMember(Name = "art_crop", EmitDefaultValue = false)]
        public string ArtCrop { get; set; }

        /// <summary>
        /// Gets or Sets BorderCrop
        /// </summary>
        [DataMember(Name = "border_crop", EmitDefaultValue = false)]
        public string BorderCrop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImageUri {\n");
            sb.Append("  Small: ").Append(Small).Append("\n");
            sb.Append("  Normal: ").Append(Normal).Append("\n");
            sb.Append("  Large: ").Append(Large).Append("\n");
            sb.Append("  Png: ").Append(Png).Append("\n");
            sb.Append("  ArtCrop: ").Append(ArtCrop).Append("\n");
            sb.Append("  BorderCrop: ").Append(BorderCrop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
