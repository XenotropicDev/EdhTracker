/*
 * Scryfall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Set
    /// </summary>
    [DataContract(Name = "set")]
    public partial class Set : IValidatableObject
    {
        /// <summary>
        /// Defines SetType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SetTypeEnum
        {
            /// <summary>
            /// Enum Core for value: core
            /// </summary>
            [EnumMember(Value = "core")]
            Core = 1,

            /// <summary>
            /// Enum Expansion for value: expansion
            /// </summary>
            [EnumMember(Value = "expansion")]
            Expansion = 2,

            /// <summary>
            /// Enum Masters for value: masters
            /// </summary>
            [EnumMember(Value = "masters")]
            Masters = 3,

            /// <summary>
            /// Enum Masterpiece for value: masterpiece
            /// </summary>
            [EnumMember(Value = "masterpiece")]
            Masterpiece = 4,

            /// <summary>
            /// Enum FromTheVault for value: from_the_vault
            /// </summary>
            [EnumMember(Value = "from_the_vault")]
            FromTheVault = 5,

            /// <summary>
            /// Enum Spellbook for value: spellbook
            /// </summary>
            [EnumMember(Value = "spellbook")]
            Spellbook = 6,

            /// <summary>
            /// Enum PremiumDeck for value: premium_deck
            /// </summary>
            [EnumMember(Value = "premium_deck")]
            PremiumDeck = 7,

            /// <summary>
            /// Enum DuelDeck for value: duel_deck
            /// </summary>
            [EnumMember(Value = "duel_deck")]
            DuelDeck = 8,

            /// <summary>
            /// Enum Commander for value: commander
            /// </summary>
            [EnumMember(Value = "commander")]
            Commander = 9,

            /// <summary>
            /// Enum Planechase for value: planechase
            /// </summary>
            [EnumMember(Value = "planechase")]
            Planechase = 10,

            /// <summary>
            /// Enum Conspiracy for value: conspiracy
            /// </summary>
            [EnumMember(Value = "conspiracy")]
            Conspiracy = 11,

            /// <summary>
            /// Enum Archenemy for value: archenemy
            /// </summary>
            [EnumMember(Value = "archenemy")]
            Archenemy = 12,

            /// <summary>
            /// Enum Vanguard for value: vanguard
            /// </summary>
            [EnumMember(Value = "vanguard")]
            Vanguard = 13,

            /// <summary>
            /// Enum Funny for value: funny
            /// </summary>
            [EnumMember(Value = "funny")]
            Funny = 14,

            /// <summary>
            /// Enum Starter for value: starter
            /// </summary>
            [EnumMember(Value = "starter")]
            Starter = 15,

            /// <summary>
            /// Enum Box for value: box
            /// </summary>
            [EnumMember(Value = "box")]
            Box = 16,

            /// <summary>
            /// Enum Promo for value: promo
            /// </summary>
            [EnumMember(Value = "promo")]
            Promo = 17,

            /// <summary>
            /// Enum Token for value: token
            /// </summary>
            [EnumMember(Value = "token")]
            Token = 18,

            /// <summary>
            /// Enum Memorabilia for value: memorabilia
            /// </summary>
            [EnumMember(Value = "memorabilia")]
            Memorabilia = 19,

            /// <summary>
            /// Enum TreasureChest for value: treasure_chest
            /// </summary>
            [EnumMember(Value = "treasure_chest")]
            TreasureChest = 20
        }


        /// <summary>
        /// Gets or Sets SetType
        /// </summary>
        [DataMember(Name = "set_type", EmitDefaultValue = false)]
        public SetTypeEnum? SetType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Set" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="mtgoCode">mtgoCode.</param>
        /// <param name="name">name.</param>
        /// <param name="setType">setType.</param>
        /// <param name="releasedAt">releasedAt.</param>
        /// <param name="blockCode">blockCode.</param>
        /// <param name="block">block.</param>
        /// <param name="parentSetCode">parentSetCode.</param>
        /// <param name="cardCount">cardCount.</param>
        /// <param name="digital">digital.</param>
        /// <param name="foil">foil.</param>
        /// <param name="iconSvgUri">iconSvgUri.</param>
        /// <param name="searchUri">searchUri.</param>
        public Set(string code = default(string), string mtgoCode = default(string), string name = default(string), SetTypeEnum? setType = default(SetTypeEnum?), DateOnly releasedAt = default(DateOnly), string blockCode = default(string), string block = default(string), string parentSetCode = default(string), int cardCount = default(int), bool digital = default(bool), bool foil = default(bool), string iconSvgUri = default(string), string searchUri = default(string))
        {
            this.Code = code;
            this.MtgoCode = mtgoCode;
            this.Name = name;
            this.SetType = setType;
            this.ReleasedAt = releasedAt;
            this.BlockCode = blockCode;
            this.Block = block;
            this.ParentSetCode = parentSetCode;
            this.CardCount = cardCount;
            this.Digital = digital;
            this.Foil = foil;
            this.IconSvgUri = iconSvgUri;
            this.SearchUri = searchUri;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets MtgoCode
        /// </summary>
        [DataMember(Name = "mtgo_code", EmitDefaultValue = false)]
        public string MtgoCode { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ReleasedAt
        /// </summary>
        [DataMember(Name = "released_at", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateOnly ReleasedAt { get; set; }

        /// <summary>
        /// Gets or Sets BlockCode
        /// </summary>
        [DataMember(Name = "block_code", EmitDefaultValue = false)]
        public string BlockCode { get; set; }

        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name = "block", EmitDefaultValue = false)]
        public string Block { get; set; }

        /// <summary>
        /// Gets or Sets ParentSetCode
        /// </summary>
        [DataMember(Name = "parent_set_code", EmitDefaultValue = false)]
        public string ParentSetCode { get; set; }

        /// <summary>
        /// Gets or Sets CardCount
        /// </summary>
        [DataMember(Name = "card_count", EmitDefaultValue = false)]
        public int CardCount { get; set; }

        /// <summary>
        /// Gets or Sets Digital
        /// </summary>
        [DataMember(Name = "digital", EmitDefaultValue = true)]
        public bool Digital { get; set; }

        /// <summary>
        /// Gets or Sets Foil
        /// </summary>
        [DataMember(Name = "foil", EmitDefaultValue = true)]
        public bool Foil { get; set; }

        /// <summary>
        /// Gets or Sets IconSvgUri
        /// </summary>
        [DataMember(Name = "icon_svg_uri", EmitDefaultValue = false)]
        public string IconSvgUri { get; set; }

        /// <summary>
        /// Gets or Sets SearchUri
        /// </summary>
        [DataMember(Name = "search_uri", EmitDefaultValue = false)]
        public string SearchUri { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Set {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  MtgoCode: ").Append(MtgoCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SetType: ").Append(SetType).Append("\n");
            sb.Append("  ReleasedAt: ").Append(ReleasedAt).Append("\n");
            sb.Append("  BlockCode: ").Append(BlockCode).Append("\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  ParentSetCode: ").Append(ParentSetCode).Append("\n");
            sb.Append("  CardCount: ").Append(CardCount).Append("\n");
            sb.Append("  Digital: ").Append(Digital).Append("\n");
            sb.Append("  Foil: ").Append(Foil).Append("\n");
            sb.Append("  IconSvgUri: ").Append(IconSvgUri).Append("\n");
            sb.Append("  SearchUri: ").Append(SearchUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
