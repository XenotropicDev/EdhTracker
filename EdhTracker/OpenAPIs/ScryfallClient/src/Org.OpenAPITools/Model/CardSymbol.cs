/*
 * Scryfall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CardSymbol
    /// </summary>
    [DataContract(Name = "card_symbol")]
    public partial class CardSymbol : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public Colors? Colors { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardSymbol" /> class.
        /// </summary>
        /// <param name="symbol">symbol.</param>
        /// <param name="looseVariant">looseVariant.</param>
        /// <param name="english">english.</param>
        /// <param name="transposable">transposable.</param>
        /// <param name="representsMana">representsMana.</param>
        /// <param name="cmc">cmc.</param>
        /// <param name="appearsInManaCosts">appearsInManaCosts.</param>
        /// <param name="funny">funny.</param>
        /// <param name="colors">colors.</param>
        public CardSymbol(string symbol = default(string), string looseVariant = default(string), string english = default(string), bool transposable = default(bool), bool representsMana = default(bool), double cmc = default(double), bool appearsInManaCosts = default(bool), bool funny = default(bool), Colors? colors = default(Colors?))
        {
            this.Symbol = symbol;
            this.LooseVariant = looseVariant;
            this.English = english;
            this.Transposable = transposable;
            this.RepresentsMana = representsMana;
            this.Cmc = cmc;
            this.AppearsInManaCosts = appearsInManaCosts;
            this.Funny = funny;
            this.Colors = colors;
        }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets LooseVariant
        /// </summary>
        [DataMember(Name = "loose_variant", EmitDefaultValue = false)]
        public string LooseVariant { get; set; }

        /// <summary>
        /// Gets or Sets English
        /// </summary>
        [DataMember(Name = "english", EmitDefaultValue = false)]
        public string English { get; set; }

        /// <summary>
        /// Gets or Sets Transposable
        /// </summary>
        [DataMember(Name = "transposable", EmitDefaultValue = true)]
        public bool Transposable { get; set; }

        /// <summary>
        /// Gets or Sets RepresentsMana
        /// </summary>
        [DataMember(Name = "represents_mana", EmitDefaultValue = true)]
        public bool RepresentsMana { get; set; }

        /// <summary>
        /// Gets or Sets Cmc
        /// </summary>
        [DataMember(Name = "cmc", EmitDefaultValue = false)]
        public double Cmc { get; set; }

        /// <summary>
        /// Gets or Sets AppearsInManaCosts
        /// </summary>
        [DataMember(Name = "appears_in_mana_costs", EmitDefaultValue = true)]
        public bool AppearsInManaCosts { get; set; }

        /// <summary>
        /// Gets or Sets Funny
        /// </summary>
        [DataMember(Name = "funny", EmitDefaultValue = true)]
        public bool Funny { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CardSymbol {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  LooseVariant: ").Append(LooseVariant).Append("\n");
            sb.Append("  English: ").Append(English).Append("\n");
            sb.Append("  Transposable: ").Append(Transposable).Append("\n");
            sb.Append("  RepresentsMana: ").Append(RepresentsMana).Append("\n");
            sb.Append("  Cmc: ").Append(Cmc).Append("\n");
            sb.Append("  AppearsInManaCosts: ").Append(AppearsInManaCosts).Append("\n");
            sb.Append("  Funny: ").Append(Funny).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
