@using EdhTracker.Data
@using System.Collections.ObjectModel
@using Microsoft.EntityFrameworkCore
<MudDialog>
    <DialogContent>
        <MudForm>
            <MudGrid>
                <MudItem xs="12">
                    <MudNumericField T="int" Label="Number of Players" Value="numberOfPlayers" ValueChanged="SetupGame"></MudNumericField>
                </MudItem>

                <MudDatePicker Label="Date" @bind-Date="playDate" />
                <MudTimePicker Label="Time" AmPm="true" @bind-Time="playTime" />

                @foreach (var seat in Game.Seats)
                {
                    <MudItem xs="3">
                        <MudCheckBox T="GameResult?" Value="seat.Result" ValueChanged="r => WinnerChanged(r, seat)" Converter="@(new GameResultToBoolConverter())">Winner</MudCheckBox>
                    </MudItem>
                    <MudItem xs="9">
                        <MudSelect T="Deck" Label="Deck" Value="seat.Deck" ValueChanged="d => DeckChanged(d, seat)">
                            @foreach (var deck in PlayGroup.Decks.Where(d => d.IsActive && (seat.Pilot == null || d.Player.Id == seat.Pilot.Id)).OrderBy(d => d.Commander.Name))
                            {
                                <MudSelectItem Value="deck">@deck.Commander.Name</MudSelectItem>
                            }
                        </MudSelect>
                        <MudDivider />
                        <MudSelect Label="Pilot" @bind-Value="seat.Pilot">  @* SelectedValues="@(new List<Player>{seat.Deck.Player})" *@
                            @foreach (var pilot in PlayGroup.Players)
                            {
                                <MudSelectItem Value="pilot">@pilot.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddGame">Save</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    protected override void OnInitialized()
    {
        DataContext = DataContextFactory.CreateDbContext();
        PlayGroup = DataContext.PlayGroups.Find(GroupId)!;

        if (Game == default)
        {
            SetupGame(numberOfPlayers);
        }
        else
        {
            numberOfPlayers = Game.Seats.Count();
            Game = DataContext.Games.Find(Game.Id)!;
        }

        base.OnInitialized();
    }

    private TimeSpan? playTime = DateTime.Now.TimeOfDay;
    private DateTime? playDate = DateTime.Today;

    void WinnerChanged(GameResult? Result, PlayerSeat changedSeat)
    {
        foreach (var seat in Game.Seats)
        {
            if (seat.Result == GameResult.Win && seat != changedSeat) seat.Result = GameResult.Loss;

            if (changedSeat == seat) seat.Result = Result;
        }
    }

    void DeckChanged(Deck deck, PlayerSeat seat)
    {
        seat.Deck = deck;
        seat.Pilot = deck.Player;
    }

    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    [Inject]
    public IDbContextFactory<DataContext> DataContextFactory { get; set; } = null!;
    private DataContext DataContext = null!;

    [Parameter]
    public Data.Game Game { get; set; } = new();

    [Parameter, EditorRequired]
    public Guid GroupId { get; set; }

    private PlayGroup PlayGroup = null!;

    int numberOfPlayers = 4;

    private void SetupGame(int newPlayerCount)
    {
        numberOfPlayers = newPlayerCount;

        for (int i = Game.Seats.Count; i < newPlayerCount; i++)
            Game.Seats.Add(new() { Result = GameResult.Loss });

        if (Game.Seats.Count > newPlayerCount)
            Game.Seats.RemoveRange(newPlayerCount, Game.Seats.Count - newPlayerCount);
    }

    private async Task AddGame()
    {
        try
        {
            await DataContext.Entry(PlayGroup).ReloadAsync();

            if (playDate.HasValue && playTime.HasValue) 
                Game.PlayTime = playDate.Value.Add(playTime.Value);

            if (DataContext.Entry(Game).State == EntityState.Added) 
                PlayGroup.GameHistory.Add(Game);
            
            await DataContext.SaveChangesAsync();
            MudDialog.Close(DialogResult.Ok(Game));
        }
        catch (Exception ex)
        {
            throw;
        }
    }

    void Cancel() => MudDialog.Cancel();
}