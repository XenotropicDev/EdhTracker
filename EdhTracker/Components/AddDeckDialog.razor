@using EdhTracker.Components
@using EdhTracker.Data
@using Microsoft.EntityFrameworkCore
@using Org.OpenAPITools.Api
@using System.ComponentModel.DataAnnotations
@using Serilog
@using System.Text.RegularExpressions

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="2" Class="mr-2">
                @if (Deck?.Icon != null)
                {
                    <MudImage Fluid="true" ObjectFit="ObjectFit.Cover" Src="@Deck.Icon.ToString()" Class="rounded-lg" Alt="@Deck.Commander.Name"></MudImage>
                }
                else
                {
                    <MudSkeleton Width="100px" Height="100px" SkeletonType="SkeletonType.Rectangle" Class="rounded-lg" Animation="Animation.False"/>
                }
            </MudItem>
        
            <MudItem xs="10">
                    <MudForm @ref="form">
                        <MudStack Row="true">
                            <MudAutocomplete T="string" @bind-Value=Deck.Commander.Name
                                             Label="Commander Name"
                                             SearchFunc="@ScryfallSearch"
                                             ShowProgressIndicator="true"
                                             AdornmentIcon="@Icons.Material.Filled.Search"
                                             Class="object-fill"/>
                        <MudStack Class="pa-0 ma-0">
                            <MudButton OnClick="LoadFromScryfall" Color="Color.Info" Variant="Variant.Outlined" Size="Size.Small">Load Scryfall</MudButton>
                            <MudCheckBox Class="mt-n3" Size="Size.Small" @bind-Value="showOnlyLegendaries">Legendary</MudCheckBox>
                        </MudStack>
                    </MudStack>
        
                        @* <MudSwitch Color="Color.Primary" @bind-Value="hasPartner">Has Partner</MudSwitch> *@
                        @if (hasPartner)
                        {
                            <MudText>Sorry, not supported yet. Someone actually needing this will prompt me to add it, so bug me please.</MudText>
                        }
        
                        <MudSelect T="Player" @bind-Value=Deck.Player Label="Select a Player" Required="true" RequiredError="The deck must have a player">
                            @foreach (var player in Pod.Players)
                            {
                                <MudSelectItem Value="player">@player.Name</MudSelectItem>
                            }
                        </MudSelect>
        
                        <MudTextField T="Uri" @bind-Value=Deck.Icon Label="Deck Icon URL (optional)"></MudTextField>
                        <MudTextField T="string" @bind-Text=Deck.ColorIdentity Label="Color Identity (optional)"
                                      Validation="@(new RegularExpressionAttribute("([WUBRG]{0,5})|C") { ErrorMessage = "Must only use the letters W U B R and G or a single C"})">
                        </MudTextField>
        
                        <MudTextField T="string" @bind-Value=Deck.Archetype Label="Archetype (optional)"></MudTextField>
                        <MudTextField T="Uri" @bind-Value=Deck.Decklist Label="Deck list URL (optional)"></MudTextField>
                        <MudCheckBox @bind-Value="Deck.IsActive">Show Deck in game dropdown</MudCheckBox>
        
                    </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveDeck">Save Deck</MudButton>
        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    MudForm form;
    bool isFormValid;
    bool showOnlyLegendaries = true;

    void Cancel() => MudDialog.Cancel();

    private bool hasPartner = false;

    [Parameter]
    public Guid? DeckId { get; set; }

    protected override void OnInitialized()
    {
        if (DeckId != null) Deck = DataContext.Decks.Find(DeckId) ?? new();
    }

    public Deck Deck { get; set; } = new();

    private CardsApi _cardsApi = new();

    private async Task LoadFromScryfall()
    {
        try
        {
            var card = await _cardsApi.GetNamedAsync(fuzzy: Deck.Commander.Name);
            if (card != null)
            {
                Deck.Commander.Name = card.Name;

                Deck.ColorIdentity = string.Join("", card.ColorIdentity.Select(c => c.ToString()));

                var commander = new Commander();
                commander.Name = card.Name;

                commander.Commanders.Add(new() { Name = card.Name, Scryfall = new Uri(card.ScryfallUri) });

                Deck.Commander = commander;

                Deck.Icon = new Uri(card.ImageUris.ArtCrop ?? card.ImageUris.Png);
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Couldn't find card in scryfall matching {0}", Deck.Commander.Name);
        }
    }

    private async Task<IEnumerable<string>> ScryfallSearch(string value)
    {
        try
        {
            if (value == null || value.Length < 3) return new List<string>();

            if (!Regex.IsMatch(value, @"[:><={}]")) value = $"name:/\\b{value}/";

            if (showOnlyLegendaries) value += " t:legendary";
            var results = await _cardsApi.CardsSearchAsync(value);
            return results?.Data?.Select(c => c.Name) ?? new List<string>();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Couldn't find card in scryfall matching {0}", value);
            return new List<string>();
        }
    }

    [Parameter, EditorRequired]
    public PlayGroup Pod { get; set; } = null!;

    [Parameter, EditorRequired]
    public DataContext DataContext { get; set; } = null!;

    private async Task SaveDeck()
    {
        try
        {
            if (!form.IsValid) return;

            if (!Pod.Decks.Any(d => d.Id == Deck.Id)) 
                Pod.Decks.Add(Deck);
            
            await DataContext.SaveChangesAsync();

            MudDialog.Close();
        }
        catch (Exception ex)
        {
            Log.Error(ex, "Couldn't save changes for deck {0} ({1})", Deck.Commander.Name, Deck.Id);
        }
    }
}
