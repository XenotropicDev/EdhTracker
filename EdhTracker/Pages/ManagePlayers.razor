@page "/Group/{podId:guid}/Players"
@using EdhTracker.Components
@using EdhTracker.Data
@using Microsoft.EntityFrameworkCore
@using Org.OpenAPITools.Api
@using System.ComponentModel.DataAnnotations
@inject IDialogService DialogService

<PageTitle>@Pod.Name Players</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@Pod.Name Players</MudText>

<MudPaper>
    <MudDataGrid Items="Pod.Players">
        <Columns>
            <PropertyColumn Property="x => x.Name" />
            <TemplateColumn>
                <CellTemplate>
                    <MudTooltip Text="@Messages.DoNothing">
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" Size="@Size.Small" OnClick="() => EditPlayer(context.Item)" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudTooltip Text="@Messages.DoNothing">
                        <MudIconButton Icon="@Icons.Material.Outlined.Delete" Size="@Size.Small" />
                    </MudTooltip>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudPaper>

<MudPaper Class="pa-4">
    <MudButton OnClick="AddPlayer">Add a new player</MudButton>
</MudPaper>

@code {
    private string playerNameToAdd = string.Empty;

    private DataContext DataContext;

    [Parameter]
    public Guid PodId { get; set; }

    [Inject]
    public IDbContextFactory<DataContext> DataContextFactory { get; set; }

    public PlayGroup Pod { get => DataContext.PlayGroups.Find(PodId)!; }

    protected override async Task OnInitializedAsync()
    {
        DataContext = await DataContextFactory.CreateDbContextAsync();
    }

    private async Task AddPlayer()
    {
        var parameters = new DialogParameters<AddPlayerDialog>();
        parameters.Add(x => x.GroupId, PodId);

        var dialog = DialogService.Show<AddPlayerDialog>("Add Player", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();    
        }
    }

    public async Task EditPlayer(Player p)
    {
        var parameters = new DialogParameters<EditPlayerDialog>();
        parameters.Add(x => x.GroupId, PodId);
        parameters.Add(x => x.Player, p);

        var dialog = DialogService.Show<EditPlayerDialog>("Edit Player", parameters);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            StateHasChanged();
        }
    }
}